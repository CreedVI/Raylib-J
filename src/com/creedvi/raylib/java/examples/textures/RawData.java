package com.creedvi.raylib.java.examples.textures;

import com.creedvi.raylib.java.rlj.Raylib;
import com.creedvi.raylib.java.rlj.core.Color;
import com.creedvi.raylib.java.rlj.textures.Image;
import com.creedvi.raylib.java.rlj.textures.Texture2D;
import com.creedvi.raylib.java.rlj.textures.Textures;

import static com.creedvi.raylib.java.rlj.rlgl.RLGL.PixelFormat.PIXELFORMAT_UNCOMPRESSED_R8G8B8A8;

//TODO: FileIO still not working...

public class RawData{

    public static void main(String[] args){
        // Initialization
        //--------------------------------------------------------------------------------------
        int screenWidth = 800;
        int screenHeight = 450;

        Raylib rlj = new Raylib(screenWidth, screenHeight, "raylib-j [textures] example - texture from raw data");

        // NOTE: Textures MUST be loaded after Window initialization (OpenGL context is required)

        // Load RAW image data (512x512, 32bit RGBA, no file header)
        Image fudesumiRaw = rlj.textures.LoadImageRaw("resources/fudesumi.raw", 384, 512,
                PIXELFORMAT_UNCOMPRESSED_R8G8B8A8, 0);
        Texture2D fudesumi = rlj.textures.LoadTextureFromImage(fudesumiRaw);  // Upload CPU (RAM) image to GPU (VRAM)
        rlj.textures.UnloadImage(fudesumiRaw);                                // Unload CPU (RAM) image data

        // Generate a checked texture by code
        int width = 960;
        int height = 480;

        // Dynamic memory allocation to store pixels data (Color type)
        Color[] pixels = new Color[width*height];

        for (int y = 0; y < height; y++)
        {
            for (int x = 0; x < width; x++)
            {
                if (((x/32 + y/32))%2 == 0){
                    pixels[y*width + x] = Color.ORANGE;
                }
                else {
                    pixels[y*width + x] = Color.GOLD;
                }
            }
        }

        // Load pixels data into an image structure and create texture
        Image checkedIm = new Image(pixels, width, height, PIXELFORMAT_UNCOMPRESSED_R8G8B8A8, 1);

        Texture2D checked = rlj.textures.LoadTextureFromImage(checkedIm);
        rlj.textures.UnloadImage(checkedIm);         // Unload CPU (RAM) image data (pixels)
        //---------------------------------------------------------------------------------------

        // Main game loop
        while (!rlj.core.WindowShouldClose())    // Detect window close button or ESC key
        {
            // Update
            //----------------------------------------------------------------------------------
            // TODO: Update your variables here
            //----------------------------------------------------------------------------------

            // Draw
            //----------------------------------------------------------------------------------
            rlj.core.BeginDrawing();

            rlj.core.ClearBackground(Color.RAYWHITE);

            rlj.textures.DrawTexture(checked, screenWidth/2 - checked.width/2, screenHeight/2 - checked.height/2,
                    Textures.Fade(Color.WHITE, 0.5f));
            rlj.textures.DrawTexture(fudesumi, 430, -30, Color.WHITE);

            rlj.text.DrawText("CHECKED TEXTURE ", 84, 85, 30, Color.BROWN);
            rlj.text.DrawText("GENERATED by CODE", 72, 148, 30, Color.BROWN);
            rlj.text.DrawText("and RAW IMAGE LOADING", 46, 210, 30, Color.BROWN);

            rlj.text.DrawText("(c) Fudesumi sprite by Eiden Marsal", 310, screenHeight - 20, 10, Color.BROWN);

            rlj.core.EndDrawing();
            //----------------------------------------------------------------------------------
        }

        // De-Initialization
        //--------------------------------------------------------------------------------------
        rlj.textures.UnloadTexture(fudesumi);    // Texture unloading
        rlj.textures.UnloadTexture(checked);     // Texture unloading
        //--------------------------------------------------------------------------------------

    }

}
